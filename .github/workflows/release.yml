name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest'
      
    - name: Setup version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          echo "tag=v${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Build app
      run: |
        xcodebuild -project Pawcus/Pawcus.xcodeproj \
                   -scheme Pawcus \
                   -configuration Release \
                   -derivedDataPath ./DerivedData \
                   -archivePath ./Pawcus.xcarchive \
                   CODE_SIGN_IDENTITY="Developer ID Application" \
                   DEVELOPMENT_TEAM="${{ secrets.TEAM_ID }}" \
                   CODE_SIGNING_ALLOWED_FOR_APPS=YES \
                   CODE_SIGN_STYLE=Manual \
                   archive
    
    - name: Create export options
      run: |
        cat > export_options.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>developer-id</string>
            <key>teamID</key>
            <string>${{ secrets.TEAM_ID }}</string>
            <key>signingCertificate</key>
            <string>Developer ID Application</string>
            <key>signingStyle</key>
            <string>manual</string>
        </dict>
        </plist>
        EOF
                   
    - name: Export app
      run: |
        xcodebuild -exportArchive \
                   -archivePath ./Pawcus.xcarchive \
                   -exportPath ./Export \
                   -exportOptionsPlist ./export_options.plist \
                   -allowProvisioningUpdates
    
    - name: Notarize app
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      run: |
        if [ -n "$APPLE_ID" ] && [ -n "$APPLE_ID_PASSWORD" ]; then
          echo "Notarizing app..."
          # Create a ZIP file for notarization
          cd ./Export
          ditto -c -k --sequesterRsrc --keepParent Pawcus.app Pawcus-notarize.zip
          
          # Submit for notarization
          xcrun notarytool submit Pawcus-notarize.zip \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "${{ secrets.TEAM_ID }}" \
            --wait
          
          # Staple the notarization ticket
          xcrun stapler staple Pawcus.app
          cd ..
        else
          echo "Skipping notarization (APPLE_ID or APPLE_ID_PASSWORD not set)"
        fi
                   
    - name: Create DMG
      run: |
        mkdir -p ./Release
        cp -R ./Export/Pawcus.app ./Release/
        hdiutil create -volname "Pawcus" -srcfolder ./Release -ov -format UDZO ./Pawcus.dmg
    
    - name: Notarize DMG
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      run: |
        if [ -n "$APPLE_ID" ] && [ -n "$APPLE_ID_PASSWORD" ]; then
          echo "Notarizing DMG..."
          # Submit DMG for notarization
          xcrun notarytool submit ./Pawcus.dmg \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "${{ secrets.TEAM_ID }}" \
            --wait
          
          # Staple the notarization ticket
          xcrun stapler staple ./Pawcus.dmg
        else
          echo "Skipping DMG notarization (APPLE_ID or APPLE_ID_PASSWORD not set)"
        fi
        
    - name: Create ZIP for Sparkle
      run: |
        cd ./Export
        # Create a clean zip for Sparkle (without __MACOSX folders)
        ditto -c -k --sequesterRsrc --keepParent Pawcus.app ../Pawcus.zip
        cd ..
        
    - name: Download and setup Sparkle tools
      run: |
        curl -L -o Sparkle-2.7.0.tar.xz https://github.com/sparkle-project/Sparkle/releases/download/2.7.0/Sparkle-2.7.0.tar.xz
        tar -xf Sparkle-2.7.0.tar.xz
        
    - name: Sign update with EdDSA
      id: sign_update
      run: |
        # Sign the update
        SIGNATURE=$(./bin/sign_update Pawcus.zip | tail -1)
        echo "signature=$SIGNATURE" >> $GITHUB_OUTPUT
        
    - name: Calculate checksums and file size
      id: sparkle_info
      run: |
        SHA=$(shasum -a 256 Pawcus.zip | awk '{print $1}')
        SIZE=$(stat -f%z Pawcus.zip)
        echo "sha256=$SHA" >> $GITHUB_OUTPUT
        echo "size=$SIZE" >> $GITHUB_OUTPUT
        shasum -a 256 Pawcus.dmg > Pawcus.dmg.sha256
        shasum -a 256 Pawcus.zip > Pawcus.zip.sha256
        
    - name: Generate Sparkle appcast.xml
      run: |
        cat > appcast.xml << EOF
        <?xml version="1.0" standalone="yes"?>
        <rss xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" version="2.0">
            <channel>
                <title>Pawcus</title>
                <language>en</language>
                <item>
                    <title>Version ${{ steps.version.outputs.version }}</title>
                    <pubDate>$(date -u +"%a, %d %b %Y %H:%M:%S GMT")</pubDate>
                    <sparkle:minimumSystemVersion>13.0</sparkle:minimumSystemVersion>
                    <enclosure url="https://agsrumeaczdydskvqxlr.supabase.co/storage/v1/object/public/sparkle-updates/Pawcus.zip"
                              sparkle:version="${{ steps.version.outputs.version }}"
                              sparkle:shortVersionString="${{ steps.version.outputs.version }}"
                              sparkle:edSignature="${{ steps.sign_update.outputs.signature }}"
                              length="${{ steps.sparkle_info.outputs.size }}"
                              type="application/octet-stream" />
                    <sparkle:deltas>
                        <enclosure url="https://agsrumeaczdydskvqxlr.supabase.co/storage/v1/object/public/sparkle-updates/Pawcus.zip"
                                   sparkle:version="${{ steps.version.outputs.version }}"
                                   sparkle:shortVersionString="${{ steps.version.outputs.version }}"
                                   sparkle:deltaFrom="*"
                                   length="${{ steps.sparkle_info.outputs.size }}"
                                   type="application/octet-stream"
                                   sparkle:edSignature="${{ steps.sign_update.outputs.signature }}" />
                    </sparkle:deltas>
                </item>
            </channel>
        </rss>
        EOF
        
    - name: Upload to Supabase Storage
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      run: |
        # Upload Pawcus.zip
        curl -X POST \
          "$SUPABASE_URL/storage/v1/object/sparkle-updates/Pawcus.zip" \
          -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
          -H "Content-Type: application/zip" \
          -H "x-upsert: true" \
          --data-binary "@Pawcus.zip"
        
        # Upload appcast.xml
        curl -X POST \
          "$SUPABASE_URL/storage/v1/object/sparkle-updates/appcast.xml" \
          -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
          -H "Content-Type: application/xml" \
          -H "x-upsert: true" \
          --data-binary "@appcast.xml"
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: Pawcus ${{ steps.version.outputs.version }}
        body: |
          ## Pawcus ${{ steps.version.outputs.version }}
          
          ### Installation
          
          **Homebrew (Recommended):**
          ```bash
          brew tap swmaeStrong/pawcus
          brew install --cask pawcus
          ```
          
          **Direct Download:**
          - Download `Pawcus.dmg` for installer
          - Download `Pawcus.zip` for portable version
          
          ### Auto-Update
          Pawcus will automatically check for updates and notify you when a new version is available.
          
          ### Changes
          - Bug fixes and improvements
          
          ### System Requirements
          - macOS 13.0 or later
          - Accessibility permissions required
          
        draft: false
        prerelease: false
        
    - name: Upload DMG
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Pawcus.dmg
        asset_name: Pawcus.dmg
        asset_content_type: application/octet-stream
        
    - name: Upload ZIP
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Pawcus.zip
        asset_name: Pawcus.zip
        asset_content_type: application/zip
        
    - name: Upload DMG checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Pawcus.dmg.sha256
        asset_name: Pawcus.dmg.sha256
        asset_content_type: text/plain
        
    - name: Upload ZIP checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Pawcus.zip.sha256
        asset_name: Pawcus.zip.sha256
        asset_content_type: text/plain
        
    - name: Upload appcast.xml
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./appcast.xml
        asset_name: appcast.xml
        asset_content_type: application/xml
        
    - name: Trigger Homebrew update
      run: |
        curl -X POST \
          -H "Authorization: token ${{ secrets.HOMEBREW_UPDATE_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/swmaeStrong/homebrew-pawcus/dispatches \
          -d '{"event_type":"update-cask","client_payload":{"version":"${{ steps.version.outputs.version }}"}}'